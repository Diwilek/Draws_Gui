/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject_draws;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;

/**
 *
 * @author Dawid
 */
public class JPanelMyDraw extends javax.swing.JPanel {

    /**
     * Creates new form JPanelMyDraw
     */
    public JPanelMyDraw() {
        initComponents();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint (Graphics g)
    {
       if (image != null) 
       {
           g.drawImage(image, 0, 0, this);
       }
       else
       {
           image = createImage( getWidth(), getHeight() );
       }
       
    }

    public void drawLineToPoint(Point p)
    {
       Graphics g = image.getGraphics();
       g.setColor(color);
       int h = getHeight();
       g.drawLine(0, h - 0, p.x, h - p.y);
       g.dispose();
       repaint();
    }
    
    /**
     * 
     */
    public void clear()
    {
        Graphics g = image.getGraphics();
        g.clearRect(0, 0, image.getWidth(null), image.getHeight(null));
        g.dispose();
        repaint();
    }
    
    public void drawCoordinate(Point p)
    {
       
       int h = getHeight();
       int w = getWidth();
       int ramka = 20; //     
       
       Graphics g = image.getGraphics();
       g.setColor(color);
       g.drawLine(ramka/2, h - p.y, w - ramka/2, h - p.y);       // oś pozioma 
       g.drawLine( (int)(w - 3.0*ramka /4.0 + 0.5), h - p.y - 2, w - ramka/2, h - p.y);       // górna część grota
       g.drawLine( (int)(w - 3.0*ramka /4.0 + 0.5), h - p.y + 2, w - ramka/2, h - p.y);       // dolna część grota
       
       g.drawLine(p.x, h - ramka/2, p.x, h - h + ramka/2);       // oś pozioma 
       g.drawLine(p.x - 2, h - h + (int) (3.0 *ramka/4.0), p.x, h - h + ramka/2);       // lewa część grota
       g.drawLine(p.x + 2, h - h + (int) (3.0 *ramka/4.0), p.x, h - h + ramka/2);       // prawa część grota
       
       g.dispose();
       //g.drawLine(0, 0, p.x, h - p.y);   // oś pionowa
       repaint();
    }
    
    public Image getImage()
    {
        return image;
    }
    
    public void setImage(Image image)
    {
        this.image = image;
        repaint();
    }
    
    private Image image;   // do rysowania wykresu
    private Color color = Color.BLACK;   // kolor rysowania
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
